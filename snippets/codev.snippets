snippet ABSF Absolute Value

	ABSF(${1:expr})

snippet ACOSF Arccosine

	ACOSF(${1:expr})

snippet ASINF Arcsine

	ASINF(${1:expr})

snippet ATANF Arctangent

	ATANF(${1:expr})

snippet COSF Cosine

	COSF(${1:expr})

snippet EXPF Exponential

	EXPF(${1:expr})

snippet LOGF Natural Logarithm

	LOGF(${1:expr})

snippet LOG10F Common Logarithm

	LOG10F(${1:expr})

snippet MAXF "desription": "Maximum of exp1 and exp2"

	MAXF(${1:expr1},${2:expr2})

snippet MINF Minimum of exp1 and exp2

	MINF(${1:expr1},${2:expr2})

snippet MODF Remainder of ${1:expr1} by ${2:expr2}

	MODF(${1:expr1},${2:expr2})

snippet RANDF Return random value [0..1)

	RANDF

snippet ROUNDF Round to integer

	ROUNDF(${1:expr1})

snippet SIGNF absf(expr1)*sign(expr2)

	SIGNF(${1:expr1},${2:expr2})

snippet SINF Sine

	SINF(${1:expr1})

snippet SQRTF Square root

	SQRTF(${1:expr1})

snippet TANF Tangent

	TANF(${1:expr1})

snippet ZFRFIT Fitting to Fringe Zernike polynomial

	ZFRFIT(${1:num_points},${2:x},${3:y},${4:num_terms},${5:coefs})

snippet ZRNFIT Fitting to Normal Zernike polynomial

	ZRNFIT(${1:num_points},${2:x},${3:y},${4:num_terms},${5:coefs})

snippet GAUSSWTS Compute coordinates and weights for Gaussian quadrature

	GAUSSWTS(${1:num_input_pts},${2:input_coords},${3:input_wts},${4:num_quad_pts},${5:quad_coords},${6:quad_wts})

snippet ABCD ABCD matrix

	ABCD(${1:zoom},${2:wave},${3:field},${4:surface_start}, ${5:surface_end}, ${6:start_ray_config_arr}, ${7:final_ray_config_arr}, ${8:output_arr})


snippet AS_BUILT_ABC Tolerance sensitivity analysis using current set of tolerance and compensator

	AS_BUILT_ABC(${1:zoom},${2:field},${3:NRD},${4:output_type},${5:cross_terms},${6:linear_terms})

snippet AS_BUILT_VAR Return TOR output using current set of tolerance and compensator

	AS_BUILT_VAR(${1:zoom},${2:field},${3:NRD},${4:output_type})

snippet BESTSPH Bestfit spherical radius

	BESTSPH(${1:surface},${2:zoom},${3:min_height},${4:max_height})

snippet CNVTFIELD Convert field type

	CNVTFIELD(${1:field_type})

snippet EVALZERN Evaluate Zernike polynomials and compute the value at (x,y)

	EVALZERN(${1:wave},${2:field},${3:zoom},${4:x},${5:y},${6:pol_type},${7:output_string},${8:zernike_type})

snippet FITERROR Evaluate Zernike polynomials and compute the RMS error

	FITERROR(${1:wave},${2:field},${3:zoom},${4:pol_type},${5:output_string},${6:zernike_type})

snippet GAUSSBEAM Trace a slow Gaussianbeam through an optical system and calculate at the specified surface the beamradius, beam orientation, wavefront radiusof curvature, waist position and waist radius

	GAUSSBEAM(${1:surface},${2:zoom},${3:field},${4:wave},${5:input_arr},${6:output_string})

snippet INDEX Refractive index at (x,y,x) of gradientindex material

	INDEX(${1:surface},${2:zoom},${3:field},${4:wave},${5:glass},${6:x},${7:y},${8:z})

snippet INT_DEPART Verifies Finite Element Analysis (FEA) software is creating correct .INT files

	INT_DEPART(${1:surface},${2:zoom},${3:x},${4:y},${5:nor|sag})

snippet MTF_1FLD Compute MTF

	MTF_1FLD(${1:zoom},${2:field},${3:frequency},${4:azimuth},${5:NRD},${6:output_arr},${7:dif|geo},${8:sin|sqw})

snippet NORMRADIUS Normalized radius generated with ZERNIKE, ZFRCOEF

	NORMRADIUS(${1:wave},${2:field},${3:zoom},${4:pol_type},${5:output_string},${6:zernike_type})

snippet POLGRID Trace grid of rays and return the polarization property at the image surface

	POLGRID(${1:zoom},${2:wave},${3:field},${4:aper_check},${5:num_rays},${6:input_arr},${7:output_arr})

snippet PSF_1FLD Compute point spread function

	PSF_1FLD(${1:zoom},${2:field},${3:wave},${4:TGR}, ${5:PGR},${6:NRD},${7:GRI},${8:PRO},${9:XSC},${10:PHA},${11:norm},${12:THR},${13:output_array})

snippet PSF_DATA_1FLD Compute point spread function with intensity of each pixel

	PSF_DATA_1FLD(${1:zoom},${2:field},${3:wave},${4:TGR}, ${5:PGR},${6:NRD},${7:GRI},${8:PRO},${9:XSC},${10:PHA},${11:norm},${12:THR},${13:output_array},${14:data_array})

snippet RAYPOL Perform faster ray tracing with more outputs than RAYTRA

	RAYPOL(${1:zoom},${2:wave},${3:field},${4:aper_check},${5:num_rays},${6:input_arr},${7:output_arr})

snippet RAYRSI Perform RSI ray tracing

	RAYRSI(${1:zoom},${2:wave},${3:field},${4:ref_surf},${5:input_arr})

snippet RAYSIN Perform SIN ray tracing

	RAYSIN(${1:zoom},${2:wave},${3:x_tan},${4:y_tan},${5:x_dir_tan},${6:y_dir_tan})

snippet RAYTRA Perform SIN ray tracing towards the image surface

	RAYTRA(${1:zoom},${2:wave},${3:aper_check},${4:input_arr},${5:output_arr})

snippet RMSSPOT Compute RMS spot size

	RMSSPOT(${1:zoom},${2:field},${3:defocus},${4:RTL|NRD})

snippet RMSWE Compute RMS wavefront error at all fields

	RMSWE(${1:zoom},${2:wave},${3:NRD},${4:output_arr},${5:focus})

snippet RMS_1FLD Compute RMS wavefront error

	RMS_1FLD(${1:zoom},${2:field},${3:wave},${4:NRD},${5:output_arr}.${6:focus})

snippet SAGF Sag of the surface at (x,y)

	SAGF(${1:surface},${2:zoom},${3:x_coord},${4:y_coord})

snippet SASF Compute surface astigmatism

	SASF(${1:surface},${2:zoom},${3:x},${4:y},${5:output_arr})

snippet SDERIVF Compute sag, 1st and 2nd derivatives

	SDERIVF(${1:surface},${2:zoom},${3:x_coord},${4:y_coord},${5:output_arr})

snippet SPOTDATA Compute spot size

	SPOTDATA(${1:zoom},${2:field},${3:defocus},${4:RTL|NRD},${5:reference},${6:x_shift},${7:y_shift},${8:output_arr})

snippet SURFSAGD Compute variance of the sag difference from the input curvature for specified points

	SURFSAGD(${1:surface},${2:zoom},${3:curvature},${4:x_array_input},${5:y_array_input},${6:output_array})

snippet TRA_1FLD Compute the transmission and projected solid angle at the object using TRA

	TRA_1FLD(${1:zoom},${2:x_fld},${3:y_fld},${4:NRD},${5:geo_or_stoke},${6:grid_scale_fact},${7:pol_input},${8:output_array})

snippet TRANSFORM Transform local coordinate from a surface to another

	TRANSFORM(${1:surface},${2:ref_surface},${3:zoom},${4:trans_data})

snippet ZERNIKE Compute Zernike fit coefficients

	ZERNIKE(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_rays_across_dia},${6:num_terms},${7:pupil_type},${8:pol_type},${9:int_or_phase},${10:zernike_type})

snippet ZERNIKEGQ

	ZERNIKEGQ(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_terms},${6:pupil_type},${7:pol_type},${8:int_or_phase},${9:zernike_type})
Compute Zernike fit coefficients using radial grid based on Gaussian quadrature

snippet ZFRCOEF Compute Fringe Zernike fit coefficients

	ZFRCOEF(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_rays_across_dia},${6:num_terms},${7:pupil_coord_type})

snippet ImageAdd Add imageA and imageB

	ImageAdd(${1:imageA},${2:imageB},${3:output_image})

snippet ImageAddConstantTo Add constant value to the image, overwrite the original image

	ImageAddConstantTo(${1:imageA},${2:constVal})

snippet ImageChangeGamma Gamma correction

	ImageChangeGamma(${1:image},${2:gammaValue})

snippet ImageClip Image clipping

	ImageClip(${1:image},${2:maxValue},${3:minValue},${4:component})

snippet ImageCombineComponents Combine 3 image to a single one

	ImageCombineComponents(${1:redImage},${2:greenImage},${3:blueImage},${4:colorImage})

snippet ImageCopy Copy image

	ImageCopy(${1:inputImage},${2:outputImage})

snippet ImageDelete Delete image

	ImageDelete(${1:image})

snippet ImageDisplay Display image on the new window

	ImageDisplay(${1:image},${2:scaling})

snippet ImageExtractComponent Extract monochrome image from RGB image

	ImageExtractComponent(${1:RGBImage},${2:monochromeImage},${3:channel})

snippet ImageFlipX Flip image (X direction)

	ImageFlipX(image)

snippet ImageFlipY Flip image (Y direction)

	ImageFlipY(image)

snippet ImageFromArray Write data from 2D array to image

	ImageFromArray(${1:inputArray},${2:monochromeImage})

snippet ImageGetAverageValueColor Get the average value of the pixels in each channel of a color image

	ImageGetAverageValueColor(${1:image},${2:aveArray})

snippet ImageGetAverageValueMonochrome Get the average value of the pixels in each channel of a monochrome image

	ImageGetAverageValueMonochrome(${1:image},${2:aveArray})

snippet ImageGetMaxValueColor Get the maximum value of the pixels in each channel of a color image

	ImageGetMaxValueColor(${1:image},${2:maxArray})

snippet ImageGetMaxValueMonochrome Get the maximum value of the pixels in each channel of a monochrome image

	ImageGetMaxValueMonochrome(${1:image},${2:maxArray})

snippet ImageGetMinValueColor Get the minimum value of the pixels in each channel of a color image

	ImageGetMinValueColor(${1:image},${2:minArray})

snippet ImageGetMinValueMonochrome Get the minimum value of the pixels in each channel of a monochrome image

	ImageGetMinValueMonochrome(${1:image},${2:minArray})

snippet ImageGetSumOfValuesColor Get the sum of the value of the pixels in each channel of a color image

	ImageGetSumOfValuesColor(${1:image},${2:sumArray(3)})

snippet ImageGetSumOfValuesMonochrome Get the sum of the value of the pixels in each channel of a monochrome image

	ImageGetSumOfValuesMonochrome(${1:image},${2:sumArray(3)})

snippet ImageMDCopy Copy all meta data

	ImageMDCopy(${1:fromImage},${2:toImage})

snippet ImageMDCopyWavelengthsAndWeights Copy wavelengths and weights

	ImageMDCopyWavelengthsAndWeights(${1:sourceImage},${2:destinationImage})

snippet ImageMDGetCME Get CME

	ImageMDGetCME(${1:image})

snippet ImageMDGetDescriptor Get string that was assigned with ImageMDSetDescriptor

	ImageMDGetDescriptor(${1:image})

snippet ImageMDGetDEX Get DEX

	ImageMDGetDEX(${1:image})

snippet ImageMDGetDEY Get DEY

	ImageMDGetDEY(${1:image})

snippet ImageMDGetFieldOffsetX Get X offset of the center of the object within the field of view of the lens

	ImageMDGetFieldOffsetX(${1:image})

snippet ImageMDGetFieldOffsetY Get Y offset of the center of the object within the field of view of the lens

	ImageMDGetFieldOffsetY(${1:image})

snippet ImageMDGetFieldRotation Get field rotation

	ImageMDGetFieldRotation(${1:image})

snippet ImageMDGetFieldUnits Get field units

	ImageMDGetFieldUnits(${1:image})

snippet ImageMDGetGamma Get gamma value

	ImageMDGetGamma(${1:image})

snippet ImageMDGetGRI Get GRI value

	ImageMDGetGRI(${1:image})

snippet ImageMDGetImagePixelSize Get pixel size

	ImageMDGetImagePixelSize(${1:image})

snippet ImageMDGetImageSemiDiagonal Get the image semi-diagonal measurement

	ImageMDGetImageSemiDiagonal(${1:image})

snippet ImageMDGetLensName Get the lens name

	ImageMDGetLensName(${1:image})

snippet ImageMDGetNRD Get NRD

	ImageMDGetNRD(${1:image})

snippet ImageMDGetNumXPixels Get number of pixels along x direction

	ImageMDGetNumXPixels(${1:image})

snippet ImageMDGetNumYPixels Get number of pixels along y direction

	ImageMDGetNumYPixels(${1:image})

snippet ImageMDGetNumWavelengths Get number of wavelength of each channel of color image, or luminesence of monochrome image

	ImageMDGetNumWavelengths

snippet ImageMDGetObjectFileName Get file name of the objet image

	ImageMDGetObjectFileName(${1:image})

snippet ImageMDGetObjectSemiDiagonal Get semidiagonal of the objet image

	ImageMDGetObjectSemiDiagonal(${1:image})

snippet ImageMDGetOffsetValue Get offset value of subsequent IMS result

	ImageMDGetOffsetValue(${1:image})

snippet ImageMDGetPMX Get PMX

	ImageMDGetPMX(${1:image})

snippet ImageMDGetPMY Get PMY

	ImageMDGetPMY(${1:image})

snippet ImageMDSetSimulationDate Get the date when IMS was executed

	ImageMDSetSimulationDate(${1:image},${2:dateString})

snippet ImageMDSetSym Set symmetry, rotational(ROT) or non-rotational(NON)

	ImageMDSetSym(${1:image},${2:symString})

snippet ImageMDSetTGR Set TGR value

	ImageMDSetTGR(${1:image},${2:tgrValue})

snippet ImageMDSetTitle Set image title

	ImageMDSetTitle(${1:image},${2:titleString})

snippet ImageMDSetWavelengthsAndWeights Set wavelength and weight of one color on a 2D array

	ImageMDSetWavelengthsAndWeights(${1:image},${2:wvlAndWtArray},${3:colorStr},${4:numWavelengths})

snippet ImageMultiplyByConstant Multiply constant value on the image, overwrite the original image

	ImageMultiplyByConstant(${1:image},${2:constVal})

snippet ImagePutPixelAt

	ImagePutPixelAt(${1:image},${2:row},${3:column},${4:component},${5:value})
Put the value on the pixel of the image

snippet ImageRead Read image file

	ImageRead(${1:filename},${2:image})

snippet ImageRestoreFrom Read image file and contain as IMG variable

	ImageRestoreFrom(${1:myfile},${2:image})

snippet ImageRotate Rotate image and output as new image

	ImageRotate(${1:startingImage},${2:outputImage},${3:rotationAngleDegrees})

snippet ImageSaveAs Save image as specified filetype

	ImageSaveAs(${1:image},${2:filename},${3:filetype})

snippet ImageSubtract Perform outputImage = imageA - imageB

	ImageSubtract(${1:imageA},${2:imageB},${3:outputImage})

snippet ImageToArray Load image data and move to 2D array

	ImageToArray(${1:monochromeImage},${2:outputArray})

snippet ImageWrite Write image to 16bit or 48 bit PNG

	ImageWrite(${1:filename},${2:image})

snippet ARR_TO_BUF Copy array to buffer

	ARR_TO_BUF(${1:array},${2:num_rows},${3:num_cols},${4:buf_num})

snippet BUF_TO_ARR Copy buffer to array

	BUF_TO_ARR(${1:buf_num},${2:array},${3:start_row},${4:end_row},${5:start_col},${6:end_col})

snippet FFTdDts Perform FFT

	FFTdDts(${1:cen_in},${2:cen_out},${3:fdata},${4:num_rows},${5:num_cols},${6:fwd})

snippet GET_COMPLEX_MAGNITUDE Creates an array of magnitudes from an array of complex numbers

	GET_COMPLEX_MAGNITUDE(${1:comp},${2:mag},${3:num_mags})

snippet GetDim1Num Get number of rows

	GetDim1Num(${1:array})

snippet GetDim2Num Get number of columns

	GetDim2Num(${1:array2D})

snippet GET_IMAGINARY_PART Get imaginary part of complex array

	GET_IMAGINARY_PART(${1:comp},${2:imag},${3:num_imags})

snippet GET_REAL_PART Get real part of complex array

	GET_REAL_PART(${1:comp},${2:real},${3:num_reals})

snippet PAD_REAL_TO_COMPLEX Create complex array

	PAD_REAL_TO_COMPLEX(${1:real},${2:comp},${3:num_reals})

snippet ReDimNum Change array size

	ReDimNum(${1:array2D},${2:newNumRows},${3:newNumColumns})

snippet SCALE_REAL_ARRAY Scale real array

	SCALE_REAL_ARRAY(${1:real},${2:scale},${3:num_vals})

snippet STDEV Compute standard deviation of the array

	STDEV(${1:array},${2:num_vals})

snippet SVD Singular value decomposition

	SVD(${1:A},${2:rows},${3:cols}.${4:U},${5:V},${6:S})

snippet SUMF Get sum value of all elements in the array

	SUMF(${1:array},${2:num_vals})

snippet CONCAT Concatenate strings

	CONCAT(${1:string_expr1},${2:string_expr2})

snippet FIND_STR_ARR Return the first position where the specified string is found

	FIND_STR_ARR(${1:string},${2:string_array_name})

snippet JOIN Concatenates the strings in the array into a single string with the specified delimiter

	JOIN(${1:string_array_name},${2:separator_string},${3:string_array_element},${4:num of strings})

snippet LENSTR Get length of the string

	LENSTR(${1:string_expr})

snippet LOCSTR Get the starting position of sub-string in the whole string

	LOCSTR(${1:string_expr},${2:sub_string_expr})

snippet LOWCASE Convert to lower cases

	LOWCASE(${1:string_expr})

snippet NUM_TO_STR Convert number to a string

	NUM_TO_STR(${1:expr})

snippet RFSTR Convert a replacement field entry to a string

	RFSTR(${1:expr})

snippet STR_TO_NUM Convert string to a number

	STR_TO_NUM(${1:string_expr})

snippet SUBSTR Extract sub string with start and length specified

	SUBSTR(${1:string_expr},${2:beg_expr},${3:length_expr})

snippet TRUNC Truncate blanks

	TRUNC(${1:string_expr})

snippet UPCASE Convert to upper cases

	UPCASE(${1:string_expr})

snippet EOFILE Return true when EOF is detected

	EOFILE

snippet CVERROR Output user defined error message

	CVERROR(${1:error_msg},${2:cont_line})

snippet CVWARNING Output user defined warning message

	CVWARNING(${1:warning_msg},${2:cont_line})

snippet CVPUTREC Output information message within 256 characters

	CVPUTREC(${1:string_expr})

snippet THREADNUM Return the thread number of the calling Macro-PLUS code

	THREADNUM

snippet INPARALLEL Indicates whether the calling Macro-PLUS codeis in a parallel region or in a serial region

	INPARALLEL

snippet ISFCT Return true if specified UDF exists

	ISFCT(${1:string_expr})

snippet ISLCL Return true if specified local variable exists

	ISLCL(${1:string_expr})

snippet ISGBL Return true if specified global variable exists

	ISGBL(${1:string_expr})

