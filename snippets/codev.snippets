snippet ABSF

	ABSF(${1:expr})
# "description": "Absolute Value"

snippet ACOSF

	ACOSF(${1:expr})
# "description": "Arccosine"

snippet ASINF

	ASINF(${1:expr})
# "description": "Arcsine"

snippet ATANF

	ATANF(${1:expr})
# "description": "Arctangent"

snippet COSF

	COSF(${1:expr})
# "description": "Cosine"

snippet EXPF 

	EXPF(${1:expr})
# "description": "Exponential"

snippet LOGF

	LOGF(${1:expr})
# "description": "Natural Logarithm"

snippet LOG10F

	LOG10F(${1:expr})
# "description": "Common Logarithm"

snippet MAXF

	MAXF(${1:expr1},${2:expr2})
"desription": "Maximum of exp1 and exp2"

snippet MINF

	MINF(${1:expr1},${2:expr2})
# "description": "Minimum of exp1 and exp2"

snippet MODF

	MODF(${1:expr1},${2:expr2})
# "description": "Remainder of ${1:expr1} by ${2:expr2}"

snippet RANDF

	RANDF
# "description": "Return random value [0..1)"

snippet ROUNDF

	ROUNDF(${1:expr1})
# "description": "Round to integer"

snippet SIGNF

	SIGNF(${1:expr1},${2:expr2})
# "description":"absf(expr1)*sign(expr2)"

snippet SINF

	SINF(${1:expr1})
# "description":"Sine"

snippet SQRTF

	SQRTF(${1:expr1})
# "description":"Square root"

snippet TANF

	TANF(${1:expr1})
# "description":"Tangent"

snippet ZFRFIT

	ZFRFIT(${1:num_points},${2:x},${3:y},${4:num_terms},${5:coefs})
# "description":"Fitting to Fringe Zernike polynomial"

snippet ZRNFIT

	ZRNFIT(${1:num_points},${2:x},${3:y},${4:num_terms},${5:coefs})
# "description":"Fitting to Normal Zernike polynomial"

snippet GAUSSWTS

	GAUSSWTS(${1:num_input_pts},${2:input_coords},${3:input_wts},${4:num_quad_pts},${5:quad_coords},${6:quad_wts})
# "description":"Compute coordinates and weights for Gaussian quadrature"



snippet ABCD

	ABCD(${1:zoom},${2:wave},${3:field},${4:surface_start}, ${5:surface_end}, ${6:start_ray_config_arr}, ${7:final_ray_config_arr}, ${8:output_arr})

# "description": "ABCD matrix"

snippet AS_BUILT_ABC

	AS_BUILT_ABC(${1:zoom},${2:field},${3:NRD},${4:output_type},${5:cross_terms},${6:linear_terms})
# "description": "Tolerance sensitivity analysis using current set of tolerance and compensator"

snippet AS_BUILT_VAR

	AS_BUILT_VAR(${1:zoom},${2:field},${3:NRD},${4:output_type})
# "description": "Return TOR output using current set of tolerance and compensator"

snippet BESTSPH

	BESTSPH(${1:surface},${2:zoom},${3:min_height},${4:max_height})
# "description":"Bestfit spherical radius"

snippet CNVTFIELD

	CNVTFIELD(${1:field_type})
# "description":"Convert field type"

snippet EVALZERN

	EVALZERN(${1:wave},${2:field},${3:zoom},${4:x},${5:y},${6:pol_type},${7:output_string},${8:zernike_type})
# "description":"Evaluate Zernike polynomials and compute the value at (x,y)"

snippet FITERROR

	FITERROR(${1:wave},${2:field},${3:zoom},${4:pol_type},${5:output_string},${6:zernike_type})
# "description":"Evaluate Zernike polynomials and compute the RMS error"

snippet GAUSSBEAM

	GAUSSBEAM(${1:surface},${2:zoom},${3:field},${4:wave},${5:input_arr},${6:output_string})
# "description":"Trace a slow Gaussianbeam through an optical system and calculate at the specified surface the beamradius, beam orientation, wavefront radiusof curvature, waist position and waist radius"

snippet INDEX

	INDEX(${1:surface},${2:zoom},${3:field},${4:wave},${5:glass},${6:x},${7:y},${8:z})
# "description":"Refractive index at (x,y,x) of gradientindex material"

snippet INT_DEPART

	INT_DEPART(${1:surface},${2:zoom},${3:x},${4:y},${5:nor|sag})
# "description":"Verifies Finite Element Analysis (FEA) software is creating correct .INT files"

snippet MTF_1FLD

	MTF_1FLD(${1:zoom},${2:field},${3:frequency},${4:azimuth},${5:NRD},${6:output_arr},${7:dif|geo},${8:sin|sqw})
# "description":"Compute MTF"

snippet NORMRADIUS

	NORMRADIUS(${1:wave},${2:field},${3:zoom},${4:pol_type},${5:output_string},${6:zernike_type})
# "description":"Normalized radius generated with ZERNIKE, ZFRCOEF"

snippet POLGRID

	POLGRID(${1:zoom},${2:wave},${3:field},${4:aper_check},${5:num_rays},${6:input_arr},${7:output_arr})
# "description":"Trace grid of rays and return the polarization property at the image surface"

snippet PSF_1FLD

	PSF_1FLD(${1:zoom},${2:field},${3:wave},${4:TGR}, ${5:PGR},${6:NRD},${7:GRI},${8:PRO},${9:XSC},${10:PHA},${11:norm},${12:THR},${13:output_array})
# "description":"Compute point spread function"

snippet PSF_DATA_1FLD

	PSF_DATA_1FLD(${1:zoom},${2:field},${3:wave},${4:TGR}, ${5:PGR},${6:NRD},${7:GRI},${8:PRO},${9:XSC},${10:PHA},${11:norm},${12:THR},${13:output_array},${14:data_array})
# "description":"Compute point spread function with intensity of each pixel"

snippet RAYPOL

	RAYPOL(${1:zoom},${2:wave},${3:field},${4:aper_check},${5:num_rays},${6:input_arr},${7:output_arr})
# "description":"Perform faster ray tracing with more outputs than RAYTRA"

snippet RAYRSI

	RAYRSI(${1:zoom},${2:wave},${3:field},${4:ref_surf},${5:input_arr})
# "description":"Perform RSI ray tracing"

snippet RAYSIN

	RAYSIN(${1:zoom},${2:wave},${3:x_tan},${4:y_tan},${5:x_dir_tan},${6:y_dir_tan})
# "description":"Perform SIN ray tracing"

snippet RAYTRA

	RAYTRA(${1:zoom},${2:wave},${3:aper_check},${4:input_arr},${5:output_arr})
# "description":"Perform SIN ray tracing towards the image surface"

snippet RMSSPOT

	RMSSPOT(${1:zoom},${2:field},${3:defocus},${4:RTL|NRD})
# "description":"Compute RMS spot size"

snippet RMSWE

	RMSWE(${1:zoom},${2:wave},${3:NRD},${4:output_arr},${5:focus})
# "description":"Compute RMS wavefront error at all fields"

snippet RMS_1FLD

	RMS_1FLD(${1:zoom},${2:field},${3:wave},${4:NRD},${5:output_arr}.${6:focus})
# "description":"Compute RMS wavefront error"

snippet SAGF

	SAGF(${1:surface},${2:zoom},${3:x_coord},${4:y_coord})
# "description":"Sag of the surface at (x,y)"

snippet SASF

	SASF(${1:surface},${2:zoom},${3:x},${4:y},${5:output_arr})
# "description":"Compute surface astigmatism"

snippet SDERIVF

	SDERIVF(${1:surface},${2:zoom},${3:x_coord},${4:y_coord},${5:output_arr})
# "description":"Compute sag, 1st and 2nd derivatives"

snippet SPOTDATA

	SPOTDATA(${1:zoom},${2:field},${3:defocus},${4:RTL|NRD},${5:reference},${6:x_shift},${7:y_shift},${8:output_arr})
# "description":"Compute spot size"

snippet SURFSAGD

	SURFSAGD(${1:surface},${2:zoom},${3:curvature},${4:x_array_input},${5:y_array_input},${6:output_array})
# "description":"Compute variance of the sag difference from the input curvature for specified points"

snippet TRA_1FLD

	TRA_1FLD(${1:zoom},${2:x_fld},${3:y_fld},${4:NRD},${5:geo_or_stoke},${6:grid_scale_fact},${7:pol_input},${8:output_array})
# "description":"Compute the transmission and projected solid angle at the object using TRA"

snippet TRANSFORM

	TRANSFORM(${1:surface},${2:ref_surface},${3:zoom},${4:trans_data})
# "description":"Transform local coordinate from a surface to another"

snippet ZERNIKE

	ZERNIKE(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_rays_across_dia},${6:num_terms},${7:pupil_type},${8:pol_type},${9:int_or_phase},${10:zernike_type})
# "description":"Compute Zernike fit coefficients"

snippet ZERNIKEGQ

	ZERNIKEGQ(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_terms},${6:pupil_type},${7:pol_type},${8:int_or_phase},${9:zernike_type})
# "description":"Compute Zernike fit coefficients using radial grid based on Gaussian quadrature"

snippet ZFRCOEF

	ZFRCOEF(${1:wave},${2:field},${3:zoom},${4:coef},${5:num_rays_across_dia},${6:num_terms},${7:pupil_coord_type})
# "description":"Compute Fringe Zernike fit coefficients"



snippet ImageAdd

	ImageAdd(${1:imageA},${2:imageB},${3:output_image})
# "description":"Add imageA and imageB"

snippet ImageAddConstantTo

	ImageAddConstantTo(${1:imageA},${2:constVal})
# "description":"Add constant value to the image, overwrite the original image"

snippet ImageChangeGamma

	ImageChangeGamma(${1:image},${2:gammaValue})
# "description":"Gamma correction"

snippet ImageClip

	ImageClip(${1:image},${2:maxValue},${3:minValue},${4:component})
# "description":"Image clipping"

snippet ImageCombineComponents

	ImageCombineComponents(${1:redImage},${2:greenImage},${3:blueImage},${4:colorImage})
# "description":"Combine 3 image to a single one"

snippet ImageCopy

	ImageCopy(${1:inputImage},${2:outputImage})
# "description":"Copy image"

snippet ImageDelete

	ImageDelete(${1:image})
# "description":"Delete image"

snippet ImageDisplay

	ImageDisplay(${1:image},${2:scaling})
# "description":"Display image on the new window"

snippet ImageExtractComponent

	ImageExtractComponent(${1:RGBImage},${2:monochromeImage},${3:channel})
# "description":"Extract monochrome image from RGB image"

snippet ImageFlipX

	ImageFlipX(image)
# "description":"Flip image (X direction)"

snippet ImageFlipY

	ImageFlipY(image)
# "description":"Flip image (Y direction)"

snippet ImageFromArray

	ImageFromArray(${1:inputArray},${2:monochromeImage})
# "description":"Write data from 2D array to image"

snippet ImageGetAverageValueColor

	ImageGetAverageValueColor(${1:image},${2:aveArray})
# "description":"Get the average value of the pixels in each channel of a color image"

snippet ImageGetAverageValueMonochrome

	ImageGetAverageValueMonochrome(${1:image},${2:aveArray})
# "description":"Get the average value of the pixels in each channel of a monochrome image"

snippet ImageGetMaxValueColor

	ImageGetMaxValueColor(${1:image},${2:maxArray})
# "description":"Get the maximum value of the pixels in each channel of a color image"

snippet ImageGetMaxValueMonochrome

	ImageGetMaxValueMonochrome(${1:image},${2:maxArray})
# "description":"Get the maximum value of the pixels in each channel of a monochrome image"

snippet ImageGetMinValueColor

	ImageGetMinValueColor(${1:image},${2:minArray})
# "description":"Get the minimum value of the pixels in each channel of a color image"

snippet ImageGetMinValueMonochrome

	ImageGetMinValueMonochrome(${1:image},${2:minArray})
# "description":"Get the minimum value of the pixels in each channel of a monochrome image"

snippet ImageGetSumOfValuesColor

	ImageGetSumOfValuesColor(${1:image},${2:sumArray(3)})
# "description":"Get the sum of the value of the pixels in each channel of a color image"

snippet ImageGetSumOfValuesMonochrome

	ImageGetSumOfValuesMonochrome(${1:image},${2:sumArray(3)})
# "description":"Get the sum of the value of the pixels in each channel of a monochrome image"

snippet ImageMDCopy

	ImageMDCopy(${1:fromImage},${2:toImage})
# "description":"Copy all meta data"

snippet ImageMDCopyWavelengthsAndWeights

	ImageMDCopyWavelengthsAndWeights(${1:sourceImage},${2:destinationImage})
# "description":"Copy wavelengths and weights"

snippet ImageMDGetCME

	ImageMDGetCME(${1:image})
# "description":"Get CME"

snippet ImageMDGetDescriptor

	ImageMDGetDescriptor(${1:image})
# "description":"Get string that was assigned with ImageMDSetDescriptor"

snippet ImageMDGetDEX

	ImageMDGetDEX(${1:image})
# "description":"Get DEX"

snippet ImageMDGetDEY

	ImageMDGetDEY(${1:image})
# "description":"Get DEY"

snippet ImageMDGetFieldOffsetX

	ImageMDGetFieldOffsetX(${1:image})
# "description":"Get X offset of the center of the object within the field of view of the lens"

snippet ImageMDGetFieldOffsetY

	ImageMDGetFieldOffsetY(${1:image})
# "description":"Get Y offset of the center of the object within the field of view of the lens"

snippet ImageMDGetFieldRotation

	ImageMDGetFieldRotation(${1:image})
# "description":"Get field rotation"

snippet ImageMDGetFieldUnits

	ImageMDGetFieldUnits(${1:image})
# "description":"Get field units"

snippet ImageMDGetGamma

	ImageMDGetGamma(${1:image})
# "description":"Get gamma value"

snippet ImageMDGetGRI

	ImageMDGetGRI(${1:image})
# "description":"Get GRI value"

snippet ImageMDGetImagePixelSize

	ImageMDGetImagePixelSize(${1:image})
# "description":"Get pixel size"

snippet ImageMDGetImageSemiDiagonal

	ImageMDGetImageSemiDiagonal(${1:image})
# "description":"Get the image semi-diagonal measurement"

snippet ImageMDGetLensName

	ImageMDGetLensName(${1:image})
# "description":"Get the lens name"

snippet ImageMDGetNRD

	ImageMDGetNRD(${1:image})
# "description":"Get NRD"

snippet ImageMDGetNumXPixels

	ImageMDGetNumXPixels(${1:image})
# "description":"Get number of pixels along x direction"

snippet ImageMDGetNumYPixels

	ImageMDGetNumYPixels(${1:image})
# "description":"Get number of pixels along y direction"

snippet ImageMDGetNumWavelengths

	ImageMDGetNumWavelengths
# "description":"Get number of wavelength of each channel of color image, or luminesence of monochrome image"

snippet ImageMDGetObjectFileName

	ImageMDGetObjectFileName(${1:image})
# "description":"Get file name of the objet image"

snippet ImageMDGetObjectSemiDiagonal

	ImageMDGetObjectSemiDiagonal(${1:image})
# "description":"Get semidiagonal of the objet image"

snippet ImageMDGetOffsetValue

	ImageMDGetOffsetValue(${1:image})
# "description":"Get offset value of subsequent IMS result"

snippet ImageMDGetPMX

	ImageMDGetPMX(${1:image})
# "description":"Get PMX"

snippet ImageMDGetPMY

	ImageMDGetPMY(${1:image})
# "description":"Get PMY"

snippet ImageMDSetSimulationDate

	ImageMDSetSimulationDate(${1:image},${2:dateString})
# "description":"Get the date when IMS was executed"

snippet ImageMDSetSym

	ImageMDSetSym(${1:image},${2:symString})
# "description":"Set symmetry, rotational(ROT) or non-rotational(NON)"

snippet ImageMDSetTGR

	ImageMDSetTGR(${1:image},${2:tgrValue})
# "description":"Set TGR value"

snippet ImageMDSetTitle

	ImageMDSetTitle(${1:image},${2:titleString})
# "description":"Set image title"

snippet ImageMDSetWavelengthsAndWeights

	ImageMDSetWavelengthsAndWeights(${1:image},${2:wvlAndWtArray},${3:colorStr},${4:numWavelengths})
# "description":"Set wavelength and weight of one color on a 2D array"

snippet ImageMultiplyByConstant

	ImageMultiplyByConstant(${1:image},${2:constVal})
# "description":"Multiply constant value on the image, overwrite the original image"

snippet ImagePutPixelAt

	ImagePutPixelAt(${1:image},${2:row},${3:column},${4:component},${5:value})
# "description":"Put the value on the pixel of the image"

snippet ImageRead

	ImageRead(${1:filename},${2:image})
# "description":"Read image file"

snippet ImageRestoreFrom

	ImageRestoreFrom(${1:myfile},${2:image})
# "description":"Read image file and contain as IMG variable"

snippet ImageRotate

	ImageRotate(${1:startingImage},${2:outputImage},${3:rotationAngleDegrees})
# "description":"Rotate image and output as new image"

snippet ImageSaveAs

	ImageSaveAs(${1:image},${2:filename},${3:filetype})
# "description":"Save image as specified filetype"

snippet ImageSubtract

	ImageSubtract(${1:imageA},${2:imageB},${3:outputImage})
# "description":"Perform outputImage = imageA - imageB"

snippet ImageToArray

	ImageToArray(${1:monochromeImage},${2:outputArray})
# "description":"Load image data and move to 2D array"

snippet ImageWrite

	ImageWrite(${1:filename},${2:image})
# "description":"Write image to 16bit or 48 bit PNG"




snippet ARR_TO_BUF

	ARR_TO_BUF(${1:array},${2:num_rows},${3:num_cols},${4:buf_num})
# "description":"Copy array to buffer"

snippet BUF_TO_ARR

	BUF_TO_ARR(${1:buf_num},${2:array},${3:start_row},${4:end_row},${5:start_col},${6:end_col})
# "description":"Copy buffer to array"

snippet FFTdDts

	FFTdDts(${1:cen_in},${2:cen_out},${3:fdata},${4:num_rows},${5:num_cols},${6:fwd})
# "description":"Perform FFT"

snippet GET_COMPLEX_MAGNITUDE

	GET_COMPLEX_MAGNITUDE(${1:comp},${2:mag},${3:num_mags})
# "description":"Creates an array of magnitudes from an array of complex numbers"

snippet GetDim1Num

	GetDim1Num(${1:array})
# "description":"Get number of rows"

snippet GetDim2Num

	GetDim2Num(${1:array2D})
# "description":"Get number of columns"

snippet GET_IMAGINARY_PART

	GET_IMAGINARY_PART(${1:comp},${2:imag},${3:num_imags})
# "description":"Get imaginary part of complex array"

snippet GET_REAL_PART

	GET_REAL_PART(${1:comp},${2:real},${3:num_reals})
# "description":"Get real part of complex array"

snippet PAD_REAL_TO_COMPLEX

	PAD_REAL_TO_COMPLEX(${1:real},${2:comp},${3:num_reals})
# "description":"Create complex array"

snippet ReDimNum

	ReDimNum(${1:array2D},${2:newNumRows},${3:newNumColumns})
# "description":"Change array size"

snippet SCALE_REAL_ARRAY

	SCALE_REAL_ARRAY(${1:real},${2:scale},${3:num_vals})
# "description":"Scale real array"

snippet STDEV

	STDEV(${1:array},${2:num_vals})
# "description":"Compute standard deviation of the array"

snippet SVD

	SVD(${1:A},${2:rows},${3:cols}.${4:U},${5:V},${6:S})
# "description":"Singular value decomposition"

snippet SUMF

	SUMF(${1:array},${2:num_vals})
# "description":"Get sum value of all elements in the array"




snippet CONCAT

	CONCAT(${1:string_expr1},${2:string_expr2})
# "description":"Concatenate strings"

snippet FIND_STR_ARR

	FIND_STR_ARR(${1:string},${2:string_array_name})
# "description":"Return the first position where the specified string is found"

snippet JOIN

	JOIN(${1:string_array_name},${2:separator_string},${3:string_array_element},${4:num of strings})
# "description":"Concatenates the strings in the array into a single string with the specified delimiter"

snippet LENSTR

	LENSTR(${1:string_expr})
# "description":"Get length of the string"

snippet LOCSTR

	LOCSTR(${1:string_expr},${2:sub_string_expr})
# "description":"Get the starting position of sub-string in the whole string"

snippet LOWCASE

	LOWCASE(${1:string_expr})
# "description":"Convert to lower cases"

snippet NUM_TO_STR

	NUM_TO_STR(${1:expr})
# "description":"Convert number to a string"

snippet RFSTR

	RFSTR(${1:expr})
# "description":"Convert a replacement field entry to a string"

snippet STR_TO_NUM

	STR_TO_NUM(${1:string_expr})
# "description":"Convert string to a number"

snippet SUBSTR

	SUBSTR(${1:string_expr},${2:beg_expr},${3:length_expr})
# "description":"Extract sub string with start and length specified"

snippet TRUNC

	TRUNC(${1:string_expr})
# "description":"Truncate blanks"

snippet UPCASE

	UPCASE(${1:string_expr})
# "description":"Convert to upper cases"



snippet EOFILE

	EOFILE
# "description":"Return true when EOF is detected"



snippet CVERROR

	CVERROR(${1:error_msg},${2:cont_line})
# "description":"Output user defined error message"

snippet CVWARNING

	CVWARNING(${1:warning_msg},${2:cont_line})
# "description":"Output user defined warning message"

snippet CVPUTREC

	CVPUTREC(${1:string_expr})
# "description":"Output information message within 256 characters"

snippet THREADNUM

	THREADNUM
# "description":"Return the thread number of the calling Macro-PLUS code"

snippet INPARALLEL

	INPARALLEL
# "description":"Indicates whether the calling Macro-PLUS codeis in a parallel region or in a serial region"



snippet ISFCT

	ISFCT(${1:string_expr})
# "description":"Return true if specified UDF exists"

snippet ISLCL

	ISLCL(${1:string_expr})
# "description":"Return true if specified local variable exists"

snippet ISGBL

	ISGBL(${1:string_expr})
# "description":"Return true if specified global variable exists"

